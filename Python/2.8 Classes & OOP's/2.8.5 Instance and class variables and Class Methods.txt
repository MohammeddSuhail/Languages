Instance Variables:
Instance variables are defined at the instance level and are unique to each instance of the class. 
They are defined inside the init method and are usually used to store information that is specific to each instance of the class.

ex:

class MyClass:
    def __init__(self, name):
        self.name = name
        
    def print_name(self):
        print(self.name)

obj1 = MyClass("John")
obj2 = MyClass("Jane")

obj1.print_name() # Output: John
obj2.print_name() # Output: Jane









Class Variables:
Class variables are defined at the class level and are shared among all instances of the class. 
They are defined outside of any method and are usually used to store information that is common to all instances of the class.
To modify class variables. If you use normal methods to do this, it will create a new instance variable instead of modifying the class variable.

ex:

class MyClass:
    class_variable = 0
    
    def __init__(self):
        MyClass.class_variable += 1
        
    def print_class_variable(self):
        print(MyClass.class_variable)
        

obj1 = MyClass()
obj2 = MyClass()

obj1.print_class_variable() # Output: 2
obj2.print_class_variable() # Output: 2












Class Methods:
A class method is a type of method that is bound to the class and not the instance of the class. 
In other words, it operates on the class as a whole, rather than on a specific instance of the class. 
Class methods are defined using the "@classmethod" decorator, followed by a function definition.

ex:
For example, you might want to create a factory method that creates instances of your class in a specific way.

class ExampleClass:
    @classmethod
    def factory_method(cls, argument1, argument2):
        return cls(argument1, argument2)

e1 = ExampleClass.def factory_method(arg1, arg2)


  
